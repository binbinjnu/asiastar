%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.5
-module(login_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("login_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type c2s_heartbeat() :: #c2s_heartbeat{}.

-type s2c_heartbeat() :: #s2c_heartbeat{}.

-type c2s_login() :: #c2s_login{}.

-type s2c_login() :: #s2c_login{}.

-export_type(['c2s_heartbeat'/0, 's2c_heartbeat'/0, 'c2s_login'/0, 's2c_login'/0]).

-spec encode_msg(#c2s_heartbeat{} | #s2c_heartbeat{} | #c2s_login{} | #s2c_login{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#c2s_heartbeat{} | #s2c_heartbeat{} | #c2s_login{} | #s2c_login{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#c2s_heartbeat{} | #s2c_heartbeat{} | #c2s_login{} | #s2c_login{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      c2s_heartbeat ->
	  encode_msg_c2s_heartbeat(id(Msg, TrUserData),
				   TrUserData);
      s2c_heartbeat ->
	  encode_msg_s2c_heartbeat(id(Msg, TrUserData),
				   TrUserData);
      c2s_login ->
	  encode_msg_c2s_login(id(Msg, TrUserData), TrUserData);
      s2c_login ->
	  encode_msg_s2c_login(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_c2s_heartbeat(_Msg, _TrUserData) -> <<>>.

encode_msg_s2c_heartbeat(Msg, TrUserData) ->
    encode_msg_s2c_heartbeat(Msg, <<>>, TrUserData).


encode_msg_s2c_heartbeat(#s2c_heartbeat{timestamp = F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_c2s_login(Msg, TrUserData) ->
    encode_msg_c2s_login(Msg, <<>>, TrUserData).


encode_msg_c2s_login(#c2s_login{iSiteID = F1,
				iTerminalType = F2, iLoginType = F3,
				sAccount = F4, sPassword = F5, sMachine = F6,
				sChannel = F7},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     case is_empty_string(TrF7) of
	       true -> B6;
	       false ->
		   e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
	     end
	   end
    end.

encode_msg_s2c_login(Msg, TrUserData) ->
    encode_msg_s2c_login(Msg, <<>>, TrUserData).


encode_msg_s2c_login(#s2c_login{iCode = F1}, Bin,
		     TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(c2s_heartbeat, Bin, TrUserData) ->
    id(decode_msg_c2s_heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(s2c_heartbeat, Bin, TrUserData) ->
    id(decode_msg_s2c_heartbeat(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(c2s_login, Bin, TrUserData) ->
    id(decode_msg_c2s_login(Bin, TrUserData), TrUserData);
decode_msg_2_doit(s2c_login, Bin, TrUserData) ->
    id(decode_msg_s2c_login(Bin, TrUserData), TrUserData).



decode_msg_c2s_heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_c2s_heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_c2s_heartbeat(<<>>, 0, 0, _) ->
    #c2s_heartbeat{};
dfp_read_field_def_c2s_heartbeat(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_c2s_heartbeat(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_c2s_heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c2s_heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_c2s_heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_c2s_heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_c2s_heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_c2s_heartbeat(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_c2s_heartbeat(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_c2s_heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_c2s_heartbeat(<<>>, 0, 0, _) ->
    #c2s_heartbeat{}.

skip_varint_c2s_heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_c2s_heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_c2s_heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_c2s_heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_c2s_heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_c2s_heartbeat(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_c2s_heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c2s_heartbeat(Rest2, 0, 0,
				     TrUserData).

skip_group_c2s_heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c2s_heartbeat(Rest, 0, Z2,
				     TrUserData).

skip_32_c2s_heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c2s_heartbeat(Rest, Z1, Z2,
				     TrUserData).

skip_64_c2s_heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_c2s_heartbeat(Rest, Z1, Z2,
				     TrUserData).

decode_msg_s2c_heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_s2c_heartbeat(Bin, 0, 0,
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_s2c_heartbeat(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_s2c_heartbeat_timestamp(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_s2c_heartbeat(<<>>, 0, 0, F@_1, _) ->
    #s2c_heartbeat{timestamp = F@_1};
dfp_read_field_def_s2c_heartbeat(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_s2c_heartbeat(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_s2c_heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s2c_heartbeat(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_s2c_heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s2c_heartbeat_timestamp(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s2c_heartbeat(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_s2c_heartbeat(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s2c_heartbeat(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_s2c_heartbeat(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_s2c_heartbeat(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s2c_heartbeat(<<>>, 0, 0, F@_1, _) ->
    #s2c_heartbeat{timestamp = F@_1}.

d_field_s2c_heartbeat_timestamp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s2c_heartbeat_timestamp(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_s2c_heartbeat_timestamp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_s2c_heartbeat(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_s2c_heartbeat(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_s2c_heartbeat(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_s2c_heartbeat(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_s2c_heartbeat(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_s2c_heartbeat(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s2c_heartbeat(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s2c_heartbeat(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s2c_heartbeat(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_s2c_heartbeat(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s2c_heartbeat(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_s2c_heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_s2c_heartbeat(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_s2c_heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_s2c_heartbeat(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_c2s_login(Bin, TrUserData) ->
    dfp_read_field_def_c2s_login(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), id(<<>>, TrUserData),
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_c2s_login(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_c2s_login_iSiteID(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c2s_login(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_c2s_login_iTerminalType(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_c2s_login(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_c2s_login_iLoginType(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c2s_login(<<34, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_c2s_login_sAccount(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c2s_login(<<42, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_c2s_login_sPassword(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c2s_login(<<50, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_c2s_login_sMachine(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c2s_login(<<58, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_c2s_login_sChannel(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_c2s_login(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #c2s_login{iSiteID = F@_1, iTerminalType = F@_2,
	       iLoginType = F@_3, sAccount = F@_4, sPassword = F@_5,
	       sMachine = F@_6, sChannel = F@_7};
dfp_read_field_def_c2s_login(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_c2s_login(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_c2s_login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_c2s_login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
dg_read_field_def_c2s_login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_c2s_login_iSiteID(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_c2s_login_iTerminalType(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      24 ->
	  d_field_c2s_login_iLoginType(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
      34 ->
	  d_field_c2s_login_sAccount(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_c2s_login_sPassword(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_c2s_login_sMachine(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_c2s_login_sChannel(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_c2s_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_c2s_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_c2s_login(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						TrUserData);
	    3 ->
		skip_group_c2s_login(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_c2s_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_c2s_login(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #c2s_login{iSiteID = F@_1, iTerminalType = F@_2,
	       iLoginType = F@_3, sAccount = F@_4, sPassword = F@_5,
	       sMachine = F@_6, sChannel = F@_7}.

d_field_c2s_login_iSiteID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_c2s_login_iSiteID(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_c2s_login_iSiteID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_c2s_login(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData).

d_field_c2s_login_iTerminalType(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_c2s_login_iTerminalType(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_c2s_login_iTerminalType(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_c2s_login(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData).

d_field_c2s_login_iLoginType(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    d_field_c2s_login_iLoginType(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
d_field_c2s_login_iLoginType(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_c2s_login(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_c2s_login_sAccount(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_c2s_login_sAccount(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_c2s_login_sAccount(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_c2s_login(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_c2s_login_sPassword(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    d_field_c2s_login_sPassword(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
d_field_c2s_login_sPassword(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_c2s_login(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_c2s_login_sMachine(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_c2s_login_sMachine(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_c2s_login_sMachine(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_c2s_login(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_c2s_login_sChannel(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_c2s_login_sChannel(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_c2s_login_sChannel(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_c2s_login(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_c2s_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_c2s_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_c2s_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c2s_login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_c2s_login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_c2s_login(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
skip_length_delimited_c2s_login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_c2s_login(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_c2s_login(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_c2s_login(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_c2s_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c2s_login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_c2s_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_c2s_login(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_s2c_login(Bin, TrUserData) ->
    dfp_read_field_def_s2c_login(Bin, 0, 0,
				 id(0, TrUserData), TrUserData).

dfp_read_field_def_s2c_login(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, TrUserData) ->
    d_field_s2c_login_iCode(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_s2c_login(<<>>, 0, 0, F@_1, _) ->
    #s2c_login{iCode = F@_1};
dfp_read_field_def_s2c_login(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_s2c_login(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_s2c_login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_s2c_login(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_s2c_login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_s2c_login_iCode(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_s2c_login(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_s2c_login(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_s2c_login(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_s2c_login(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_s2c_login(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_s2c_login(<<>>, 0, 0, F@_1, _) ->
    #s2c_login{iCode = F@_1}.

d_field_s2c_login_iCode(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_s2c_login_iCode(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_s2c_login_iCode(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_s2c_login(RestF, 0, 0, NewFValue,
				 TrUserData).

skip_varint_s2c_login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_s2c_login(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_s2c_login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_s2c_login(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_s2c_login(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_s2c_login(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_s2c_login(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_s2c_login(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_s2c_login(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_s2c_login(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_s2c_login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_s2c_login(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_s2c_login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_s2c_login(Rest, Z1, Z2, F@_1,
				 TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      c2s_heartbeat ->
	  merge_msg_c2s_heartbeat(Prev, New, TrUserData);
      s2c_heartbeat ->
	  merge_msg_s2c_heartbeat(Prev, New, TrUserData);
      c2s_login -> merge_msg_c2s_login(Prev, New, TrUserData);
      s2c_login -> merge_msg_s2c_login(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_c2s_heartbeat/3}).
merge_msg_c2s_heartbeat(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_s2c_heartbeat/3}).
merge_msg_s2c_heartbeat(#s2c_heartbeat{timestamp =
					   PFtimestamp},
			#s2c_heartbeat{timestamp = NFtimestamp}, _) ->
    #s2c_heartbeat{timestamp =
		       if NFtimestamp =:= undefined -> PFtimestamp;
			  true -> NFtimestamp
		       end}.

-compile({nowarn_unused_function,merge_msg_c2s_login/3}).
merge_msg_c2s_login(#c2s_login{iSiteID = PFiSiteID,
			       iTerminalType = PFiTerminalType,
			       iLoginType = PFiLoginType, sAccount = PFsAccount,
			       sPassword = PFsPassword, sMachine = PFsMachine,
			       sChannel = PFsChannel},
		    #c2s_login{iSiteID = NFiSiteID,
			       iTerminalType = NFiTerminalType,
			       iLoginType = NFiLoginType, sAccount = NFsAccount,
			       sPassword = NFsPassword, sMachine = NFsMachine,
			       sChannel = NFsChannel},
		    _) ->
    #c2s_login{iSiteID =
		   if NFiSiteID =:= undefined -> PFiSiteID;
		      true -> NFiSiteID
		   end,
	       iTerminalType =
		   if NFiTerminalType =:= undefined -> PFiTerminalType;
		      true -> NFiTerminalType
		   end,
	       iLoginType =
		   if NFiLoginType =:= undefined -> PFiLoginType;
		      true -> NFiLoginType
		   end,
	       sAccount =
		   if NFsAccount =:= undefined -> PFsAccount;
		      true -> NFsAccount
		   end,
	       sPassword =
		   if NFsPassword =:= undefined -> PFsPassword;
		      true -> NFsPassword
		   end,
	       sMachine =
		   if NFsMachine =:= undefined -> PFsMachine;
		      true -> NFsMachine
		   end,
	       sChannel =
		   if NFsChannel =:= undefined -> PFsChannel;
		      true -> NFsChannel
		   end}.

-compile({nowarn_unused_function,merge_msg_s2c_login/3}).
merge_msg_s2c_login(#s2c_login{iCode = PFiCode},
		    #s2c_login{iCode = NFiCode}, _) ->
    #s2c_login{iCode =
		   if NFiCode =:= undefined -> PFiCode;
		      true -> NFiCode
		   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      c2s_heartbeat ->
	  v_msg_c2s_heartbeat(Msg, [MsgName], TrUserData);
      s2c_heartbeat ->
	  v_msg_s2c_heartbeat(Msg, [MsgName], TrUserData);
      c2s_login ->
	  v_msg_c2s_login(Msg, [MsgName], TrUserData);
      s2c_login ->
	  v_msg_s2c_login(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_c2s_heartbeat/3}).
-dialyzer({nowarn_function,v_msg_c2s_heartbeat/3}).
v_msg_c2s_heartbeat(#c2s_heartbeat{}, _Path, _) -> ok;
v_msg_c2s_heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, c2s_heartbeat}, X, Path).

-compile({nowarn_unused_function,v_msg_s2c_heartbeat/3}).
-dialyzer({nowarn_function,v_msg_s2c_heartbeat/3}).
v_msg_s2c_heartbeat(#s2c_heartbeat{timestamp = F1},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [timestamp | Path], TrUserData)
    end,
    ok;
v_msg_s2c_heartbeat(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, s2c_heartbeat}, X, Path).

-compile({nowarn_unused_function,v_msg_c2s_login/3}).
-dialyzer({nowarn_function,v_msg_c2s_login/3}).
v_msg_c2s_login(#c2s_login{iSiteID = F1,
			   iTerminalType = F2, iLoginType = F3, sAccount = F4,
			   sPassword = F5, sMachine = F6, sChannel = F7},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [iSiteID | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [iTerminalType | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int32(F3, [iLoginType | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [sAccount | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [sPassword | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [sMachine | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [sChannel | Path], TrUserData)
    end,
    ok;
v_msg_c2s_login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, c2s_login}, X, Path).

-compile({nowarn_unused_function,v_msg_s2c_login/3}).
-dialyzer({nowarn_function,v_msg_s2c_login/3}).
v_msg_s2c_login(#s2c_login{iCode = F1}, Path,
		TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [iCode | Path], TrUserData)
    end,
    ok;
v_msg_s2c_login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, s2c_login}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, c2s_heartbeat}, []},
     {{msg, s2c_heartbeat},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, c2s_login},
      [#field{name = iSiteID, fnum = 1, rnum = 2,
	      type = int32, occurrence = optional, opts = []},
       #field{name = iTerminalType, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = iLoginType, fnum = 3, rnum = 4,
	      type = int32, occurrence = optional, opts = []},
       #field{name = sAccount, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = sPassword, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = sMachine, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = sChannel, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, s2c_login},
      [#field{name = iCode, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    [c2s_heartbeat, s2c_heartbeat, c2s_login, s2c_login].


get_group_names() -> [].


get_msg_or_group_names() ->
    [c2s_heartbeat, s2c_heartbeat, c2s_login, s2c_login].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(c2s_heartbeat) -> [];
find_msg_def(s2c_heartbeat) ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def(c2s_login) ->
    [#field{name = iSiteID, fnum = 1, rnum = 2,
	    type = int32, occurrence = optional, opts = []},
     #field{name = iTerminalType, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = iLoginType, fnum = 3, rnum = 4,
	    type = int32, occurrence = optional, opts = []},
     #field{name = sAccount, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = sPassword, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = sMachine, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = sChannel, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(s2c_login) ->
    [#field{name = iCode, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"login.c2s_heartbeat">>) -> c2s_heartbeat;
fqbin_to_msg_name(<<"login.s2c_heartbeat">>) -> s2c_heartbeat;
fqbin_to_msg_name(<<"login.c2s_login">>) -> c2s_login;
fqbin_to_msg_name(<<"login.s2c_login">>) -> s2c_login;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(c2s_heartbeat) -> <<"login.c2s_heartbeat">>;
msg_name_to_fqbin(s2c_heartbeat) -> <<"login.s2c_heartbeat">>;
msg_name_to_fqbin(c2s_login) -> <<"login.c2s_login">>;
msg_name_to_fqbin(s2c_login) -> <<"login.s2c_login">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> login.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "login.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["login.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["login"].


get_msg_containment("login") ->
    [c2s_heartbeat, c2s_login, s2c_heartbeat, s2c_login];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("login") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("login") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("login") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("login") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"login.s2c_heartbeat">>) -> "login";
get_proto_by_msg_name_as_fqbin(<<"login.c2s_heartbeat">>) -> "login";
get_proto_by_msg_name_as_fqbin(<<"login.s2c_login">>) -> "login";
get_proto_by_msg_name_as_fqbin(<<"login.c2s_login">>) -> "login";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.5".

gpb_version_as_list() ->
    [4,10,5].
